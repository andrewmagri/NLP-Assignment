Index: SVM.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from sklearn.pipeline import make_pipeline\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.svm import SVC\r\nfrom WordEmbeddings import *\r\nfrom Preprocessing import *\r\nfrom Tweets import *\r\nfrom sklearn.metrics import confusion_matrix,precision_score,recall_score,f1_score\r\n\r\nimport pickle\r\nimport numpy as np\r\n\r\n\r\ndef check_if_created(filename):\r\n    try:\r\n        file = open(filename + \".pickle\")\r\n        file.close()\r\n        return True\r\n    except IOError:\r\n        print(\"File not found\")\r\n        return False\r\n\r\n\r\ndef get_data(dirText, dirLabel,output_file_name):\r\n    # Obtaining tweet text\r\n    with open(dirText, \"r\",\r\n              encoding=\"utf8\") as t:\r\n        tweets = t.read()\r\n        tweets = tweets.split(\"\\n\")\r\n\r\n    # Obtaining tweet label\r\n    with open(dirLabel, \"r\",\r\n              encoding=\"utf8\") as l:\r\n        labels = l.read()\r\n        labels = labels.split(\"\\n\")\r\n\r\n    tweets_object = preprocess(tweets, labels)\r\n\r\n    with open(output_file_name+'.pickle', 'wb') as handle:\r\n        pickle.dump(tweets_object, handle, protocol=pickle.HIGHEST_PROTOCOL)\r\n\r\n    return tweets_object\r\n\r\n\r\ndef get_train_data(dirTrainText, dirTrainLabel):\r\n    filename = \"TrainTweets\"\r\n    if check_if_created(filename):\r\n        with open(filename + '.pickle', 'rb') as handle:\r\n            return pickle.load(handle)\r\n    else:\r\n        return get_data(dirTrainText, dirTrainLabel,filename)\r\n\r\n\r\ndef get_test_data(dirTestText, dirTestLabel):\r\n    filename = \"TestTweets\"\r\n    if check_if_created(filename):\r\n        with open(filename + '.pickle', 'rb') as handle:\r\n            return pickle.load(handle)\r\n    else:\r\n        return get_data(dirTestText, dirTestLabel, filename)\r\n\r\n\r\ndef preprocess(tweets,labels):\r\n    tweets_object = Tweets()\r\n    for i in range(0, len(tweets)):\r\n        tweets[i] = \" \".join(tweets[i].split())\r\n        tweets[i] = tokenize(tweets[i])\r\n\r\n        newText = []\r\n        for word in tweets[i]:\r\n            # Checking for @ Location and eliminating any words that follow\r\n            if word == \"@\":\r\n                break\r\n\r\n            word = lemmatise(word)\r\n            word = remove_stopwords(word)\r\n            word = remove_url(word)\r\n            word = remove_puncuation(word)\r\n\r\n            if word != \"\" and word is not None:\r\n                newText.append(word)\r\n\r\n        if len(newText) == 0:\r\n            continue\r\n\r\n        tweets_object.tweetsText.append(' '.join(newText))\r\n        tweets_object.tweetsLabel.append(labels[i])\r\n    return tweets_object\r\n\r\n\r\ndef svm(tfidf_matrix, labels):\r\n    clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\r\n    clf.fit(tfidf_matrix, labels)\r\n    return clf\r\n\r\n\r\ndef run():\r\n    pass\r\n\r\n\r\ntrainTextDir = \"Semeval2018-Task2-EmojiPrediction\\\\Data\\\\tweet_by_ID_04_2_2021__05_27_42.txt.text\"\r\ntrainLabelDir = \"Semeval2018-Task2-EmojiPrediction\\\\Data\\\\tweet_by_ID_04_2_2021__05_27_42.txt.labels\"\r\ntestTextDir = \"Semeval2018-Task2-EmojiPrediction\\\\test\\\\us_test.text\"\r\ntestLabelDir = \"Semeval2018-Task2-EmojiPrediction\\\\test\\\\us_test.labels\"\r\ntrainTweets = get_train_data(trainTextDir, trainLabelDir)\r\ntestTweets = get_test_data(testTextDir, testLabelDir)\r\ntfidf_featuriser = extract_tfidf_featuriser(trainTweets.tweetsText)\r\ntrain_tfidif_matrix = tfidf_featuriser.transform(trainTweets.tweetsText)\r\ntest_tfidif_matrix = tfidf_featuriser.transform(testTweets.tweetsText)\r\nclf = svm(train_tfidif_matrix, trainTweets.tweetsLabel)\r\npredictions = clf.predict(test_tfidif_matrix)\r\nprint(predictions)\r\nprint(confusion_matrix(testTweets.tweetsLabel,predictions))\r\nprint(\"Precision: \" + str(precision_score(testTweets.tweetsLabel,predictions,average=\"macro\")))\r\nprint(\"Recall: \" + str(recall_score(testTweets.tweetsLabel,predictions,average=\"macro\")))\r\nprint(\"F1 Score: \" + str(f1_score(testTweets.tweetsLabel,predictions,average=\"macro\")))\r\naccuracy = np.sum(predictions == testTweets.tweetsLabel)/len(testTweets.tweetsLabel)\r\nprint('Accuracy: {:.3%}'.format(accuracy))\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SVM.py b/SVM.py
--- a/SVM.py	(revision ab79391eab251b0fefd0d741390dba74ea2ba067)
+++ b/SVM.py	(date 1613842986014)
@@ -88,7 +88,7 @@
 
 
 def svm(tfidf_matrix, labels):
-    clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))
+    clf = make_pipeline(StandardScaler(with_mean=False), SVC(gamma='auto'))
     clf.fit(tfidf_matrix, labels)
     return clf
 
